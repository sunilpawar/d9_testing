<?php

namespace Drupal\bn_general\Plugin\views\filter;

use Drupal\Core\Form\FormStateInterface;
use Drupal\taxonomy\Plugin\views\filter\TaxonomyIndexTidDepth;

/**
 * Filter by term id.
 *
 * @ingroup views_filter_handlers
 *
 * @ViewsFilter("taxonomy_index_tid_options")
 */
class TaxonomyIndexTidOptions extends TaxonomyIndexTidDepth {

  /**
   * Function to get defineOptions.
   */
  protected function defineOptions() {
    $options = parent::defineOptions();

    $options['expose']['limit_depth'] = ['default' => 0];
    $options['expose']['include_children'] = ['default' => 0];

    return $options;
  }

  /**
   * Function to submitExposeForm.
   */
  public function submitExposeForm($form, FormStateInterface $form_state) {
    // @todo Change the autogenerated stub
    parent::submitExposeForm($form, $form_state);
    $this->options['expose']['limit_depth'] =
      $form_state->getValue(['options', 'expose', 'limit_depth']);
    $this->options['expose']['include_children'] =
      $form_state->getValue(['options', 'expose', 'include_children']);
  }

  /**
   * Function to buildExposeForm.
   */
  public function buildExposeForm(&$form, FormStateInterface $form_state) {
    parent::buildExposeForm($form, $form_state);

    // @todo Add #state controls for exposing these options.
    $form['expose']['include_children'] = [
      '#type' => 'checkbox',
      '#title' => $this->t('Include children when limiting selection'),
      '#description' => $this->t('If the "Limit list to selected items" option is checked, checking this option will include the children of those selected items.'),
      '#default_value' => !empty($this->options['expose']['include_children']),
    ];
    $form['expose']['limit_depth'] = [
      '#type' => 'select',
      '#title' => $this->t('Limit displayed options depth'),
      '#description' => $this->t('Set to 1 to only show the root terms in this vocabulary. Set to 2 to show the root terms and their immediate children, etc. Set to No Limit to show all terms in the vocabulary.'),
      '#default_value' => $this->options['expose']['limit_depth'],
      '#options' => ['No Limit', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
    ];
  }

  /**
   * Function to valueForm.
   */
  public function valueForm(&$form, FormStateInterface $form_state) {
    parent::valueForm($form, $form_state);

    $new_options = [];
    if ($this->options['expose']['limit_depth'] > 0) {
      // @todo optimize this? loadTree caches so it shouldn't be expensive to
      // call it again. @see TaxonomyIndexTid::valueForm.
      $vocabulary = $this->vocabularyStorage->load($this->options['vid']);
      $tree = $this->termStorage->loadTree($vocabulary->id(), 0, $this->options['expose']['limit_depth'], TRUE);

      if ($tree) {
        foreach ($tree as $term) {
          $choice = new \stdClass();
          $choice->option = [$term->id() => str_repeat('-', $term->depth) .
            \Drupal::service('entity.repository')->getTranslationFromContext($term)->getName()];
          $new_options[] = $choice;
        }
      }
    }

    // @todo Figure out if these two option make sense to work together?
    if (!empty($this->options['expose']['include_children'])) {
      $vocabulary = $this->vocabularyStorage->load($this->options['vid']);
      foreach ($this->options['value'] as $tid) {
        $tree = $this->termStorage->loadTree($vocabulary->id(), $tid, NULL, TRUE);
        if ($tree) {
          foreach ($tree as $term) {
            $choice = new \stdClass();
            $choice->option = [$term->id() => str_repeat('-', $term->depth)
              . \Drupal::service('entity.repository')->getTranslationFromContext($term)->getName()];
            $new_options[] = $choice;
          }
        }
      }
    }

    if (!empty($new_options)) {
      $form['value']['#options'] = $new_options;
    }
  }

}
